from flask_wtf import FlaskForm
from flask import Flask, render_template, request, redirect, session
from wtforms import StringField, PasswordField, BooleanField, SubmitField, TextAreaField
from wtforms.validators import DataRequired
import json
from db1 import UsersModel, NewsModel, DB
from flask_socketio import SocketIO
db = DB()

user_model = UsersModel(db.get_connection())
users = user_model.init_table()

news_model = NewsModel(db.get_connection())
news = news_model.init_table()


app = Flask(__name__)
app.config['SECRET_KEY'] = 'kitten_secret_key'
socketio = SocketIO(app)


class LoginForm(FlaskForm):
    username = StringField('Логин', validators=[DataRequired()])
    password = PasswordField('Пароль', validators=[DataRequired()])
    remember_me = BooleanField('Запомнить меня')
    submit = SubmitField('Войти')
    
class RegistrationForm(FlaskForm):
    username = StringField('Логин', validators=[DataRequired()])
    password = PasswordField('Пароль', validators=[DataRequired()])
    remember_me = BooleanField('Запомнить меня')
    submit = SubmitField('Зарегистрироваться')
    
class AddNewsForm(FlaskForm):
    title = StringField('Заголовок Новости', validators=[DataRequired()])
    content = TextAreaField('Текст новости', validators=[DataRequired()])
    submit = SubmitField('Добавить')

@app.route('/')
def home():
    return render_template("home1.html")

@app.route('/users')###############
def users():
    users = UsersModel(db.get_connection()).get_all()
    return render_template('users5.html', 
                           users=users)        

@app.route('/show_news/<int:user_id>')#, methods=['GET'])
def show_news(user_id):
    news = NewsModel(db.get_connection()).get_all(user_id)
    return render_template('index1.html', username=session['username'],
                           news=news)  #############


    
@app.route('/registration', methods=['GET', 'POST'])
def registration():
    form = RegistrationForm()
    if form.validate_on_submit():
        user_name = form.username.data
        password = form.password.data
        user_model = UsersModel(db.get_connection())
        exists = user_model.exists(user_name, password)
        if not (exists[0]):
            user_model.insert(user_name, password)
        return redirect('/login')    
    return render_template('registration.html', title='Регистрация', form=form)

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user_name = form.username.data
        password = form.password.data
        user_model = UsersModel(db.get_connection())
        exists = user_model.exists(user_name, password)
        if (exists[0]):
            session['username'] = user_name
            session['user_id'] = exists[1]
            return redirect('/index')    
    return render_template('login.html', title='Авторизация', form=form)

@app.route('/logout')
def logout():
    session.pop('username',0)
    session.pop('user_id',0)
    return redirect('/login')


@app.route('/index')
def index():
    if 'username' not in session:
        return redirect('/login')
    news = NewsModel(db.get_connection()).get_all(session['user_id'])
    return render_template('index1.html', username=session['username'],
                           news=news)    

@app.route('/add_news', methods=['GET', 'POST'])
def add_news():
    if 'username' not in session:
        return redirect('/login')
    form = AddNewsForm()
    if form.validate_on_submit():
        title = form.title.data
        content = form.content.data
        nm = NewsModel(db.get_connection())
        nm.insert(title,content,session['user_id'])
        return redirect("/index")
    return render_template('add_news.html', title='Добавление новости',
                           form=form, username=session['username'])
 
@app.route('/delete_news/<int:news_id>', methods=['GET'])
def delete_news(news_id):
    if 'username' not in session:
        return redirect('/login')
    nm = NewsModel(db.get_connection())
    nm.delete(news_id)
    return redirect("/index")

@app.route('/chat')
def sessions():
    return render_template('session1.html')
def messageReceived(methods=['GET', 'POST']):
    print('message was received!!!')
@socketio.on('my event')
def handle_my_custom_event(json, methods=['GET', 'POST']):
    print('received my event: ' + str(json))
    socketio.emit('my response', json, callback=messageReceived)


if __name__ == '__main__':
    app.run(port=8080, host='127.0.0.1')
